{// generated from grammar.peg
package dsl

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/verbumby/verbum/backend/pkg/ctl/dictimport/dictparser"
)

}
All ⟵ Preamble "\n"+ as:Articles EOF {
	return dictparser.Dictionary {
		Articles: as.([]dictparser.Article),
	}, nil
}

Preamble ⟵ PreambleEntry+
PreambleEntry ⟵ '#' k:PreambleEntryKey [\t] '"' v:PreambleEntryValue '"' "\n" {
	return dictparser.MetaEntry{Key: k.(string), Value: v.(string)}, nil
}
PreambleEntryKey ⟵ [A-Z_]+ { return string(c.text), nil }
PreambleEntryValue ⟵ [\p{Latin}\p{Cyrillic}\p{Pd}\pN)(, ]+ { return string(c.text), nil }

Articles ⟵ asitf:Article* {
	as := make([]dictparser.Article, len(asitf.([]interface{})))
	for i, aitf := range asitf.([]interface{}) {
		as[i] = aitf.(dictparser.Article)
	}
	return as, nil
}

Article ⟵ hwsitf:Headword+ body:Body "\n"? {
	hws := make([]string, len(hwsitf.([]interface{})))
	for i, hwitf := range hwsitf.([]interface{}) {
		hws[i] = hwitf.(string)
	}
	result := dictparser.Article{
		Headwords: hws,
		Body: body.(string),
	}
	return result, nil
}

Headword ⟵ [^\n\t]+ "\n" {
	return string(c.text), nil
}

Body ⟵ ("\t" [^\n]+ "\n")+ {
	return string(c.text), nil
}

EOF ⟵ !.
