{// generated from grammar.peg
package krapiva
}
All ⟵ Preamble "\n" as:Articles EOF {
	return ParsedKrapiva {
		Articles: as.([]ParsedArticle),
	}, nil
}

Preamble ⟵ PreambleEntry+ [\n]
PreambleEntry ⟵ '#' k:PreambleEntryKey [\t] '"' v:PreambleEntryValue '"' "\n" {
	return ParsedPreamble{Key: k.(string), Value: v.(string)}, nil
}
PreambleEntryKey ⟵ [A-Z_]+ { return string(c.text), nil }
PreambleEntryValue ⟵ [\p{Latin}\p{Cyrillic}\p{Pd}\pN)(, ]+ { return string(c.text), nil }

Articles ⟵ asitf:Article* {
	as := make([]ParsedArticle, len(asitf.([]interface{})))
	for i, aitf := range asitf.([]interface{}) {
		as[i] = aitf.(ParsedArticle)
	}
	return as, nil
}

Article ⟵ hwsitf:Headword+ body:Body "\n" {
	hws := make([]string, len(hwsitf.([]interface{})))
	for i, hwitf := range hwsitf.([]interface{}) {
		hws[i] = hwitf.(string)
	}
	result := ParsedArticle{
		Headwords: hws,
		Body: body.(string),
	}
	return result, nil
}

Headword ⟵ [^\n\t]+ "\n" {
	return string(c.text), nil
}

Body ⟵ ("\t" [^\n]+ "\n")+ {
	return string(c.text), nil
}

EOF ⟵ !.
